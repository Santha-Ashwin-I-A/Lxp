// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String? 
  category Category? @relation(fields: [categoryId],references: [id])

  Chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment{
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String 
  course Course @relation(fields: [courseId],references: [id],onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId,chapterId])
}
model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId,courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Swot {
  id String @id @default(uuid())
  userId String
  strengths String? @db.Text
  weaknesses String? @db.Text
  opportunities String? @db.Text
  threats String? @db.Text

  explanation String? @db.Text
  suggestedRole String? @db.Text
  isFinished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Sga {
  id String @id @default(uuid())
  userId String
  topic String? @db.Text 
  result Float? 
  summary String? @db.Text
  ques1 String? @db.Text
  ques2 String? @db.Text
  ques3 String? @db.Text
  ques4 String? @db.Text
  ques5 String? @db.Text
  ques6 String? @db.Text
  ques7 String? @db.Text
  ques8 String? @db.Text
  ques9 String? @db.Text
  ques10 String? @db.Text
  isFinished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}